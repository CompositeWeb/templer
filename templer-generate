#!/usr/bin/perl

=head1 NAME

templer-generate - Generate a stub static-site to be processed via templer.

=cut

=head1 SYNOPSIS

  templer [options] path/to/generate


  Help Options:

    --help        Show the help information for this script.
    --manual      Read the manual for this script.

  Flags

    --force       Force overwriting existing files.
    --verbose     Be verbose.

=cut

=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

=cut

=head1 LICENSE

Copyright (c) 2012 by Steve Kemp.  All rights reserved.

This module is free software;
you can redistribute it and/or modify it under
the same terms as Perl itself.
The LICENSE file contains the full text of the license.

=cut



use strict;
use warnings;

use File::Path qw(mkpath);
use Getopt::Long;
use Pod::Usage;



my %CONFIG;

exit
  if (
    !GetOptions(

        # Help options
        "help",    \$CONFIG{ 'help' },
        "manual",  \$CONFIG{ 'manual' },
        "force",   \$CONFIG{ 'force' },
        "verbose", \$CONFIG{ 'verbose' },
    ) );


#
#  Help/Manual handling.
#
pod2usage(1) if ( $CONFIG{ 'help' } );
pod2usage( -verbose => 2 ) if ( $CONFIG{ 'manual' } );


#
#  Get the directory
#
my $base = shift;
if ( !defined($base) )
{
    print "Usage: $0 directory\n";
    pod2usage(1);
}



#
# Marker for file name, end of file marker, and file contents.
#
my $name   = undef;
my $marker = undef;
my $tmp    = undef;

#
# Process our data-section.
#
while ( my $line = <DATA> )
{
    chomp($line);

    #
    #  Making a directory?
    #
    if ( $line =~ /^mkdir(.*)/ )
    {
        my $dir = $1;
        $dir =~ s/^\s+|\s+$//g;

        print "MKDIR: $dir\n" if ( $CONFIG{ 'verbose' } );

        $dir = $base . "/" . $dir;

        if ( !-d $dir )
        {
            mkpath( $dir, { verbose => 0 } );
        }

    }
    elsif ( !$name && !$marker && ( $line =~ /file\s+([^\s]+)\s+([^\s]+)/ ) )
    {

        #
        #  Writing to a file?
        #
        $name   = $1;
        $marker = $2;
        $tmp    = undef;

        print "MKFILE: $1\n" if ( $CONFIG{ 'verbose' } );
    }
    else
    {

        #
        #  If we have a filename to write to, then append to the temporary
        # contents - unless we've found the EOF marker.
        #
        if ( $name && $marker )
        {
            if ( $line eq $marker )
            {
                my $create = 1;
                if ( -e $base . "/" . $name )
                {
                    $create = 0 unless ( $CONFIG{ 'force' } );
                }

                if ($create)
                {
                    my $dst = $base . "/" . $name;

                    open my $handle, ">:utf8", $dst or
                      die "Failed to write to '$dst' - $!";
                    print $handle $tmp;
                    close($handle);
                }
                else
                {
                    print
                      "Cowardly refusing to overwrite $base/$name - re-execute with --force to do so\n";
                }

                $name   = undef;
                $marker = undef;
                $tmp    = undef;
            }
            else
            {
                $tmp .= $line . "\n";
            }
        }
    }
}

#
#  All done
#
exit(0);



__DATA__
mkdir input

mkdir output

mkdir layouts

file input/robots.txt EOF
User-agent: *
Crawl-delay: 10
Disallow: /cgi-bin
Disallow: /stats
EOF

file input/index.wgn EOF
title: Welcome!
----
<p>Welcome to my site.</p>
EOF

file input/about.wgn EOF
title: About my site
----
<p>This is my site, it was generated by <a href="https://github.com/skx/templer">templer</a>.</p>
EOF

file layouts/default.layout EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
 <head>
  <!-- tmpl_if name='title' -->
   <title><!-- tmpl_var name='title' escape='html' --></title>
  <!-- tmpl_else -->
   <title>Untitled Page</title>
  <!-- /tmpl_if -->
 </head>
 <body>
  <!-- tmpl_var name='content' -->
 </body>
</html>
EOF

file templer.cfg EOF
##
#
# The first section of the configuration file refers to the
# input and output paths.
#
# Templer will process all files matching "*.skx" beneath a
# particular directory.  That directory is the input directory.
#
input = ./input/
#
##



##
#
# Within the input directory we'll process files that match
# a given suffix.
#
# By default this is ".skx", so we'll template-expand files
# named "index.skx", "about.skx", etc.
#
suffix = .wgn
#
##



##
#
# If we're working in-place then files will be expanded where
# they are found.
#
# This means that the following files will be created:
#
#   ./input/index.skx       -> input/index.html
#   ./input/foo/index.skx   -> input/foo/index.html
#   ..
#
#
# in-place = 1
#
##



##
#
# The more common way of working is to produce the output in a separate
# directory.
#
# NOTE:  If you specify both "in-place=1" and an output directory the former
#        will take precedence.
#
#
output = ./output/
#
##



##
#
# When pages are processed a layout-template will be used to expand the content
# into.
#
# Each page may specify its own layout if it so wishes, but generally we'd
# expect only one layout to exist.
#
# Here we specify both the path to the layout directory and the layout to use
# if none is specified:
#
#
layout-path = ./layouts/
layout      = default.layout
#
##




#
#  Anything below this is a global variable, accessible by name in your
# templates.
#
#  For example this:
#
#    copyright = &copy; Steve Kemp 2012
#
#  Can be used in your template, or you page text via:
#
#    <!-- tmpl_var name='copyright' -->
#
#
##
EOF

